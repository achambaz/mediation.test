% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mediation.test.R
\name{mediation_test}
\alias{mediation_test}
\title{Carries      out     the      test      of      the     composite      null
"\eqn{\delta_x    \times     \delta_y=0}"    against     its    alternative
"\eqn{\delta_x \times \delta_y\neq  0}" based on the test  statistic in the
real plane.}
\usage{
mediation_test(t, alpha = 0.05, compute_pvals = TRUE)
}
\arguments{
\item{t}{A  \code{vector}  consisting of  two  \code{numeric}s, the  test
statistic in  the real  plane, or a  'n x 2'  \code{matrix} of  such test
statistics.}

\item{alpha}{A positive \code{numeric}, the wished type-I error, which must
be the inverse of an integer larger  than 2 (defaults to 1/20=5\%).  If it
is not the  inverse of an integer, then it  is automatically rounded down
to the closer inverse of an integer.}

\item{compute_pval}{A  \code{logical}  (defaults  to 'TRUE'),  indicating
whether or not to compute p-values.}
}
\value{
A list, consisting  of: \describe{ \item{t:}{a \code{vector} of two
\code{numeric}s, the test  statistic, or a 'n x 2'  \code{matrix} of such
test  statistics;}  \item{alpha:}{a   \code{numeric},  the  type-I  error
(possibly  rounded   down  to  the   closer  inverse  of   an  integer);}
\item{decision:}{a \code{vector} of  \code{logical}s, \code{FALSE} if the
null hypothesis can be rejected for  the alternative at level 'alpha' and
\code{TRUE} otherwise;} \item{pval:}{a \code{numeric}, a (random) p-value
drawn    uniformly    between     the    two    aforementiond    bounds.}
\item{pval_lower_bound:}{a \code{vector} of lower bounds on the p-value;}
\item{pval_upper_bound:}{a \code{vector} of upper bounds on the p-value.}
}
}
\description{
Carries      out     the      test      of      the     composite      null
"\eqn{\delta_x    \times     \delta_y=0}"    against     its    alternative
"\eqn{\delta_x \times \delta_y\neq  0}" based on the test  statistic in the
real plane.
}
\examples{
n <- 10
x <- MASS::mvrnorm(n, mu = c(0, 0), Sigma = diag(c(1, 1)))
delta <- matrix(stats::runif(2 * n, min = -3, max = 3), ncol = 2)
epsilon <- stats::rbinom(n, 1, 1/2)
delta <- delta * cbind(epsilon, 1 - epsilon)
x <- x + delta
(mt <- mediation_test(x, alpha = 1/20))
plot(mt)

}
