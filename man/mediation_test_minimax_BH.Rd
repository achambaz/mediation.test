% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mediation.test.minimax.R
\name{mediation_test_minimax_BH}
\alias{mediation_test_minimax_BH}
\title{Minimax optimal testing, aiming for a  control of false discovery rate à la
Benjamini-Hochberg}
\usage{
mediation_test_minimax_BH(
  t,
  alpha = 0.05,
  truncation = 0,
  BH = c("statistics", "pval"),
  sample_size = Inf,
  K = 10L
)
}
\arguments{
\item{t}{A  \code{vector}  consisting of  two  \code{numeric}s, the  test
statistic in  the real  plane, or a  'n x 2'  \code{matrix} of  such test
statistics.}

\item{alpha}{A positive \code{numeric}, the wished false discovery rate.}

\item{truncation}{A nonnegative  \code{numeric} used to bound the rejection
region away  from the null  hypothesis space.  Defaults to 0,  in which
case the  rejection region is minimax optimal.}

\item{BH}{A \code{character},  either "statistics" or  "pval", determining
whether the Benjamini-Hochberg  testing procedure is based  on the test
statistics or on the (conservative) p-values.}

\item{sample_size}{A \code{integer}  (larger than  one), the size  of the
sample used  to derive the  test statistic. Defaults to  'Inf', meaning
that, under the  null hypothesis, the test statistic is  drawn from the
\eqn{N_2(0,I_2)} law.  If  the integer is finite, then,  under the null
hypothesis, the test statistic is drawn from the product of two Student
laws with 'sample_size-1' degrees of freedom.}

\item{K}{An \code{integer} (10 by  default) used internally to speed up the
Benjamini-Hochberg  testing procedure  when  it is  based  on the  test
statistics (more details in the  Details section). Must be smaller than
'nrow(t)'.

@details  Suppose  we  are  carrying out  \eqn{J}  tests.   Starting  from
\eqn{j=1},  we   increment  \eqn{j}  until  fewer   than  \eqn{j}  null
hypotheses  are   rejected  at  level  \eqn{\alpha\times   j/J}  for  K
consecutive iterations.   Eventually, we reject all  null hypotheses at
level \eqn{\alpha \times  jj/J}, where \eqn{jj} is  the largest integer
so far for which at least \eqn{jj} null hypotheses are rejected at this
level.  For  further   details,  we  refer  to   the  technical  report
"Optimal Tests of the Composite Null Hypothesis Arising in Mediation Analysis",
by Miles & Chambaz (2024), https://arxiv.org/abs/2107.07575}
}
\value{
A list, consisting  of: \describe{ \item{t:}{a \code{vector} of two
\code{numeric}s, the test statistic, or a 'n x 2' \code{matrix} of such
test statistics;}  \item{alpha:}{a \code{numeric}, the  false discovery
rate;} \item{truncation:}{a  nonnegative \code{numeric}, used  to bound
the   rejection   region  away   from   the   null  hypothesis   space}
\item{sample_size:}{an \code{integer},  the size of the  sample used to
derive   the  test   statistic}  \item{decision:}{a   \code{vector}  of
\code{logical}s, \code{FALSE}  if the  null hypothesis can  be rejected
for the  alternative at  false discovery  rate 'alpha'  and \code{TRUE}
otherwise;}  \item{pval:}{a   \code{vector}  of   \code{numeric}s,  the
original  (conservative)  p-values  of the  tests;}  \item{method:}{the
\code{character}  "minimax_BH",} \item{BH:}{a  \code{character}, either
'statistics'  or  'pval',  determining whether  the  Benjamini-Hochberg
testing  procedure  is   based  on  the  test  statistics   or  on  the
(conservative) p-values;}\item{K:}{the \code{integer} K used internally
to speed up the Benjamini-Hochberg procedure based on the test statistics.}}
}
\description{
Carries   out   the   minimax   optimal  test   of   the   composite   null
"\eqn{\delta_x    \times     \delta_y=0}"    against     its    alternative
"\eqn{\delta_x \times \delta_y\neq  0}" based on the test  statistic in the
real  plane,   aiming  for  a  control   of  false  discovery  rate   à  la
Benjamini-Hochberg.
}
\examples{
n <- 100
x <- MASS::mvrnorm(2 * n, mu = c(0, 0), Sigma = diag(c(1, 1)))
delta <- matrix(stats::runif(4 * n, min = -5, max = 5), ncol = 2)
epsilon <- stats::rbinom(n, size = 1, prob = 1/2)
delta <- delta * cbind(c(epsilon, rep(1, n)),
                       c(1 - epsilon, rep(1, n)))
x <- x + delta
mt_BH_stats <- mediation_test_minimax_BH(x, alpha = 1/20, BH = "statistics")
(sum(mt_BH_stats$decision))
mt_BH_pval <- mediation_test_minimax_BH(x, alpha = 1/20, BH = "pval")
(sum(mt_BH_pval$decision))

}
\seealso{
\code{\link[=mediation_test_minimax]{mediation_test_minimax()}}, upon which this function builds.
}
